-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ldl_dsolve_read2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    D : IN STD_LOGIC_VECTOR (63 downto 0);
    D_stream_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    D_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    D_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    D_stream_full_n : IN STD_LOGIC;
    D_stream_write : OUT STD_LOGIC );
end;


architecture behav of ldl_dsolve_read2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv30_0 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal gmem1_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal div_fu_132_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_reg_183 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal empty_fu_150_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal empty_reg_188 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln_fu_158_p4 : STD_LOGIC_VECTOR (59 downto 0);
    signal trunc_ln_reg_193 : STD_LOGIC_VECTOR (59 downto 0);
    signal zext_ln23_fu_179_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_read2_Pipeline_read_fu_74_ap_start : STD_LOGIC;
    signal grp_read2_Pipeline_read_fu_74_ap_done : STD_LOGIC;
    signal grp_read2_Pipeline_read_fu_74_ap_idle : STD_LOGIC;
    signal grp_read2_Pipeline_read_fu_74_ap_ready : STD_LOGIC;
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_WVALID : STD_LOGIC;
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_WLAST : STD_LOGIC;
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_RREADY : STD_LOGIC;
    signal grp_read2_Pipeline_read_fu_74_m_axi_gmem1_BREADY : STD_LOGIC;
    signal grp_read2_Pipeline_read_fu_74_D_stream_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_read2_Pipeline_read_fu_74_D_stream_write : STD_LOGIC;
    signal grp_read2_Pipeline_read_fu_74_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal sext_ln23_fu_168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_neg_fu_92_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_98_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_lshr_cast_fu_108_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_fu_118_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_84_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_112_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_cast_fu_128_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln23_fu_140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln23_fu_146_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ldl_dsolve_read2_Pipeline_read IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (15 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (127 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        D_stream_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        D_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        D_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        D_stream_full_n : IN STD_LOGIC;
        D_stream_write : OUT STD_LOGIC;
        div : IN STD_LOGIC_VECTOR (31 downto 0);
        sext_ln23 : IN STD_LOGIC_VECTOR (59 downto 0) );
    end component;



begin
    grp_read2_Pipeline_read_fu_74 : component ldl_dsolve_read2_Pipeline_read
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_read2_Pipeline_read_fu_74_ap_start,
        ap_done => grp_read2_Pipeline_read_fu_74_ap_done,
        ap_idle => grp_read2_Pipeline_read_fu_74_ap_idle,
        ap_ready => grp_read2_Pipeline_read_fu_74_ap_ready,
        m_axi_gmem1_AWVALID => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => ap_const_logic_0,
        m_axi_gmem1_AWADDR => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => ap_const_logic_0,
        m_axi_gmem1_WDATA => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => m_axi_gmem1_ARREADY,
        m_axi_gmem1_ARADDR => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => m_axi_gmem1_RVALID,
        m_axi_gmem1_RREADY => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => m_axi_gmem1_RDATA,
        m_axi_gmem1_RLAST => m_axi_gmem1_RLAST,
        m_axi_gmem1_RID => m_axi_gmem1_RID,
        m_axi_gmem1_RFIFONUM => m_axi_gmem1_RFIFONUM,
        m_axi_gmem1_RUSER => m_axi_gmem1_RUSER,
        m_axi_gmem1_RRESP => m_axi_gmem1_RRESP,
        m_axi_gmem1_BVALID => ap_const_logic_0,
        m_axi_gmem1_BREADY => grp_read2_Pipeline_read_fu_74_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => ap_const_lv2_0,
        m_axi_gmem1_BID => ap_const_lv1_0,
        m_axi_gmem1_BUSER => ap_const_lv1_0,
        D_stream_din => grp_read2_Pipeline_read_fu_74_D_stream_din,
        D_stream_num_data_valid => ap_const_lv3_0,
        D_stream_fifo_cap => ap_const_lv3_0,
        D_stream_full_n => D_stream_full_n,
        D_stream_write => grp_read2_Pipeline_read_fu_74_D_stream_write,
        div => div_reg_183,
        sext_ln23 => trunc_ln_reg_193);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_read2_Pipeline_read_fu_74_ap_done = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_read2_Pipeline_read_fu_74_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_read2_Pipeline_read_fu_74_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_read2_Pipeline_read_fu_74_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_read2_Pipeline_read_fu_74_ap_ready = ap_const_logic_1)) then 
                    grp_read2_Pipeline_read_fu_74_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                div_reg_183 <= div_fu_132_p3;
                empty_reg_188 <= empty_fu_150_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((m_axi_gmem1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                trunc_ln_reg_193 <= D(63 downto 4);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, m_axi_gmem1_ARREADY, ap_CS_fsm_state2, ap_block_state1, grp_read2_Pipeline_read_fu_74_ap_done, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_const_boolean_0 = ap_block_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((m_axi_gmem1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_read2_Pipeline_read_fu_74_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    D_stream_din <= grp_read2_Pipeline_read_fu_74_D_stream_din;

    D_stream_write_assign_proc : process(grp_read2_Pipeline_read_fu_74_D_stream_write, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            D_stream_write <= grp_read2_Pipeline_read_fu_74_D_stream_write;
        else 
            D_stream_write <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;

    ap_ST_fsm_state11_blk_assign_proc : process(grp_read2_Pipeline_read_fu_74_ap_done)
    begin
        if ((grp_read2_Pipeline_read_fu_74_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state11_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state11_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(m_axi_gmem1_ARREADY)
    begin
        if ((m_axi_gmem1_ARREADY = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_read2_Pipeline_read_fu_74_ap_done, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_read2_Pipeline_read_fu_74_ap_done = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_read2_Pipeline_read_fu_74_ap_done, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (grp_read2_Pipeline_read_fu_74_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    div_fu_132_p3 <= 
        p_neg_t_fu_112_p2 when (tmp_fu_84_p3(0) = '1') else 
        p_lshr_f_cast_fu_128_p1;
    empty_fu_150_p3 <= 
        trunc_ln23_fu_146_p1 when (icmp_ln23_fu_140_p2(0) = '1') else 
        ap_const_lv30_0;

    gmem1_blk_n_AR_assign_proc : process(m_axi_gmem1_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            gmem1_blk_n_AR <= m_axi_gmem1_ARREADY;
        else 
            gmem1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;

    grp_read2_Pipeline_read_fu_74_ap_start <= grp_read2_Pipeline_read_fu_74_ap_start_reg;
    icmp_ln23_fu_140_p2 <= "1" when (signed(p_lshr_f_fu_118_p4) > signed(ap_const_lv31_0)) else "0";

    m_axi_gmem1_ARADDR_assign_proc : process(m_axi_gmem1_ARREADY, ap_CS_fsm_state2, grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARADDR, ap_CS_fsm_state10, ap_CS_fsm_state11, sext_ln23_fu_168_p1)
    begin
        if (((m_axi_gmem1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem1_ARADDR <= sext_ln23_fu_168_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_gmem1_ARADDR <= grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARADDR;
        else 
            m_axi_gmem1_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem1_ARBURST_assign_proc : process(grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARBURST, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_gmem1_ARBURST <= grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARBURST;
        else 
            m_axi_gmem1_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem1_ARCACHE_assign_proc : process(grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARCACHE, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_gmem1_ARCACHE <= grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARCACHE;
        else 
            m_axi_gmem1_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem1_ARID_assign_proc : process(grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARID, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_gmem1_ARID <= grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARID;
        else 
            m_axi_gmem1_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem1_ARLEN_assign_proc : process(m_axi_gmem1_ARREADY, ap_CS_fsm_state2, zext_ln23_fu_179_p1, grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARLEN, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((m_axi_gmem1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem1_ARLEN <= zext_ln23_fu_179_p1(32 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_gmem1_ARLEN <= grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARLEN;
        else 
            m_axi_gmem1_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    m_axi_gmem1_ARLOCK_assign_proc : process(grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARLOCK, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_gmem1_ARLOCK <= grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARLOCK;
        else 
            m_axi_gmem1_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    m_axi_gmem1_ARPROT_assign_proc : process(grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARPROT, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_gmem1_ARPROT <= grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARPROT;
        else 
            m_axi_gmem1_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem1_ARQOS_assign_proc : process(grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARQOS, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_gmem1_ARQOS <= grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARQOS;
        else 
            m_axi_gmem1_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem1_ARREGION_assign_proc : process(grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARREGION, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_gmem1_ARREGION <= grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARREGION;
        else 
            m_axi_gmem1_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    m_axi_gmem1_ARSIZE_assign_proc : process(grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARSIZE, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_gmem1_ARSIZE <= grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARSIZE;
        else 
            m_axi_gmem1_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    m_axi_gmem1_ARUSER_assign_proc : process(grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARUSER, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_gmem1_ARUSER <= grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARUSER;
        else 
            m_axi_gmem1_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    m_axi_gmem1_ARVALID_assign_proc : process(m_axi_gmem1_ARREADY, ap_CS_fsm_state2, grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARVALID, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((m_axi_gmem1_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_gmem1_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_gmem1_ARVALID <= grp_read2_Pipeline_read_fu_74_m_axi_gmem1_ARVALID;
        else 
            m_axi_gmem1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_AWADDR <= ap_const_lv64_0;
    m_axi_gmem1_AWBURST <= ap_const_lv2_0;
    m_axi_gmem1_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem1_AWID <= ap_const_lv1_0;
    m_axi_gmem1_AWLEN <= ap_const_lv32_0;
    m_axi_gmem1_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem1_AWPROT <= ap_const_lv3_0;
    m_axi_gmem1_AWQOS <= ap_const_lv4_0;
    m_axi_gmem1_AWREGION <= ap_const_lv4_0;
    m_axi_gmem1_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem1_AWUSER <= ap_const_lv1_0;
    m_axi_gmem1_AWVALID <= ap_const_logic_0;
    m_axi_gmem1_BREADY <= ap_const_logic_0;

    m_axi_gmem1_RREADY_assign_proc : process(grp_read2_Pipeline_read_fu_74_m_axi_gmem1_RREADY, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            m_axi_gmem1_RREADY <= grp_read2_Pipeline_read_fu_74_m_axi_gmem1_RREADY;
        else 
            m_axi_gmem1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_gmem1_WDATA <= ap_const_lv128_lc_1;
    m_axi_gmem1_WID <= ap_const_lv1_0;
    m_axi_gmem1_WLAST <= ap_const_logic_0;
    m_axi_gmem1_WSTRB <= ap_const_lv16_0;
    m_axi_gmem1_WUSER <= ap_const_lv1_0;
    m_axi_gmem1_WVALID <= ap_const_logic_0;
    p_lshr_cast_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_fu_98_p4),32));
    p_lshr_f_cast_fu_128_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_fu_118_p4),32));
    p_lshr_f_fu_118_p4 <= n(31 downto 1);
    p_lshr_fu_98_p4 <= p_neg_fu_92_p2(31 downto 1);
    p_neg_fu_92_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(n));
    p_neg_t_fu_112_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_lshr_cast_fu_108_p1));
        sext_ln23_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_158_p4),64));

    tmp_fu_84_p3 <= n(31 downto 31);
    trunc_ln23_fu_146_p1 <= div_fu_132_p3(30 - 1 downto 0);
    trunc_ln_fu_158_p4 <= D(63 downto 4);
    zext_ln23_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_reg_188),64));
end behav;
