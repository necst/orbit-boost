// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ldl_dsolve_writeout (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        n_dout,
        n_num_data_valid,
        n_fifo_cap,
        n_empty_n,
        n_read,
        X2_stream_dout,
        X2_stream_num_data_valid,
        X2_stream_fifo_cap,
        X2_stream_empty_n,
        X2_stream_read,
        m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY,
        m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY,
        m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST,
        m_axi_gmem2_WID,
        m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY,
        m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID,
        m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA,
        m_axi_gmem2_RLAST,
        m_axi_gmem2_RID,
        m_axi_gmem2_RFIFONUM,
        m_axi_gmem2_RUSER,
        m_axi_gmem2_RRESP,
        m_axi_gmem2_BVALID,
        m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP,
        m_axi_gmem2_BID,
        m_axi_gmem2_BUSER,
        X_final_dout,
        X_final_num_data_valid,
        X_final_fifo_cap,
        X_final_empty_n,
        X_final_read
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] n_dout;
input  [2:0] n_num_data_valid;
input  [2:0] n_fifo_cap;
input   n_empty_n;
output   n_read;
input  [127:0] X2_stream_dout;
input  [2:0] X2_stream_num_data_valid;
input  [2:0] X2_stream_fifo_cap;
input   X2_stream_empty_n;
output   X2_stream_read;
output   m_axi_gmem2_AWVALID;
input   m_axi_gmem2_AWREADY;
output  [63:0] m_axi_gmem2_AWADDR;
output  [0:0] m_axi_gmem2_AWID;
output  [31:0] m_axi_gmem2_AWLEN;
output  [2:0] m_axi_gmem2_AWSIZE;
output  [1:0] m_axi_gmem2_AWBURST;
output  [1:0] m_axi_gmem2_AWLOCK;
output  [3:0] m_axi_gmem2_AWCACHE;
output  [2:0] m_axi_gmem2_AWPROT;
output  [3:0] m_axi_gmem2_AWQOS;
output  [3:0] m_axi_gmem2_AWREGION;
output  [0:0] m_axi_gmem2_AWUSER;
output   m_axi_gmem2_WVALID;
input   m_axi_gmem2_WREADY;
output  [127:0] m_axi_gmem2_WDATA;
output  [15:0] m_axi_gmem2_WSTRB;
output   m_axi_gmem2_WLAST;
output  [0:0] m_axi_gmem2_WID;
output  [0:0] m_axi_gmem2_WUSER;
output   m_axi_gmem2_ARVALID;
input   m_axi_gmem2_ARREADY;
output  [63:0] m_axi_gmem2_ARADDR;
output  [0:0] m_axi_gmem2_ARID;
output  [31:0] m_axi_gmem2_ARLEN;
output  [2:0] m_axi_gmem2_ARSIZE;
output  [1:0] m_axi_gmem2_ARBURST;
output  [1:0] m_axi_gmem2_ARLOCK;
output  [3:0] m_axi_gmem2_ARCACHE;
output  [2:0] m_axi_gmem2_ARPROT;
output  [3:0] m_axi_gmem2_ARQOS;
output  [3:0] m_axi_gmem2_ARREGION;
output  [0:0] m_axi_gmem2_ARUSER;
input   m_axi_gmem2_RVALID;
output   m_axi_gmem2_RREADY;
input  [127:0] m_axi_gmem2_RDATA;
input   m_axi_gmem2_RLAST;
input  [0:0] m_axi_gmem2_RID;
input  [8:0] m_axi_gmem2_RFIFONUM;
input  [0:0] m_axi_gmem2_RUSER;
input  [1:0] m_axi_gmem2_RRESP;
input   m_axi_gmem2_BVALID;
output   m_axi_gmem2_BREADY;
input  [1:0] m_axi_gmem2_BRESP;
input  [0:0] m_axi_gmem2_BID;
input  [0:0] m_axi_gmem2_BUSER;
input  [63:0] X_final_dout;
input  [2:0] X_final_num_data_valid;
input  [2:0] X_final_fifo_cap;
input   X_final_empty_n;
output   X_final_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X2_stream_read;
reg m_axi_gmem2_AWVALID;
reg[63:0] m_axi_gmem2_AWADDR;
reg[0:0] m_axi_gmem2_AWID;
reg[31:0] m_axi_gmem2_AWLEN;
reg[2:0] m_axi_gmem2_AWSIZE;
reg[1:0] m_axi_gmem2_AWBURST;
reg[1:0] m_axi_gmem2_AWLOCK;
reg[3:0] m_axi_gmem2_AWCACHE;
reg[2:0] m_axi_gmem2_AWPROT;
reg[3:0] m_axi_gmem2_AWQOS;
reg[3:0] m_axi_gmem2_AWREGION;
reg[0:0] m_axi_gmem2_AWUSER;
reg m_axi_gmem2_WVALID;
reg m_axi_gmem2_BREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    n_blk_n;
reg    gmem2_blk_n_AW;
wire    ap_CS_fsm_state2;
reg    gmem2_blk_n_B;
wire    ap_CS_fsm_state9;
reg    X_final_blk_n;
wire   [31:0] div_fu_143_p3;
reg   [31:0] div_reg_193;
reg    ap_block_state1;
reg   [59:0] trunc_ln_reg_198;
wire   [29:0] empty_fu_171_p3;
reg   [29:0] empty_reg_204;
wire    grp_writeout_Pipeline_write_fu_85_ap_start;
wire    grp_writeout_Pipeline_write_fu_85_ap_done;
wire    grp_writeout_Pipeline_write_fu_85_ap_idle;
wire    grp_writeout_Pipeline_write_fu_85_ap_ready;
wire    grp_writeout_Pipeline_write_fu_85_X2_stream_read;
wire    grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWVALID;
wire   [63:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWADDR;
wire   [0:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWID;
wire   [31:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWLEN;
wire   [2:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWSIZE;
wire   [1:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWBURST;
wire   [1:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWLOCK;
wire   [3:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWCACHE;
wire   [2:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWPROT;
wire   [3:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWQOS;
wire   [3:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWREGION;
wire   [0:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWUSER;
wire    grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_WVALID;
wire   [127:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_WDATA;
wire   [15:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_WSTRB;
wire    grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_WLAST;
wire   [0:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_WID;
wire   [0:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_WUSER;
wire    grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARVALID;
wire   [63:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARADDR;
wire   [0:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARID;
wire   [31:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARLEN;
wire   [2:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARSIZE;
wire   [1:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARBURST;
wire   [1:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARLOCK;
wire   [3:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARCACHE;
wire   [2:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARPROT;
wire   [3:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARQOS;
wire   [3:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARREGION;
wire   [0:0] grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARUSER;
wire    grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_RREADY;
wire    grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_BREADY;
reg    grp_writeout_Pipeline_write_fu_85_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire  signed [63:0] sext_ln81_fu_179_p1;
wire   [63:0] zext_ln81_fu_189_p1;
reg    X_final_read_local;
reg    n_read_local;
wire   [31:0] p_neg_fu_103_p2;
wire   [30:0] p_lshr_fu_109_p4;
wire   [31:0] p_lshr_cast_fu_119_p1;
wire   [30:0] p_lshr_f_fu_129_p4;
wire   [0:0] tmp_fu_95_p3;
wire   [31:0] p_neg_t_fu_123_p2;
wire   [31:0] p_lshr_f_cast_fu_139_p1;
wire   [0:0] icmp_ln81_fu_151_p2;
wire   [29:0] trunc_ln81_fu_157_p1;
reg   [8:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
reg    ap_ST_fsm_state9_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 grp_writeout_Pipeline_write_fu_85_ap_start_reg = 1'b0;
end

ldl_dsolve_writeout_Pipeline_write grp_writeout_Pipeline_write_fu_85(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_writeout_Pipeline_write_fu_85_ap_start),
    .ap_done(grp_writeout_Pipeline_write_fu_85_ap_done),
    .ap_idle(grp_writeout_Pipeline_write_fu_85_ap_idle),
    .ap_ready(grp_writeout_Pipeline_write_fu_85_ap_ready),
    .X2_stream_dout(X2_stream_dout),
    .X2_stream_num_data_valid(3'd0),
    .X2_stream_fifo_cap(3'd0),
    .X2_stream_empty_n(X2_stream_empty_n),
    .X2_stream_read(grp_writeout_Pipeline_write_fu_85_X2_stream_read),
    .m_axi_gmem2_AWVALID(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWVALID),
    .m_axi_gmem2_AWREADY(m_axi_gmem2_AWREADY),
    .m_axi_gmem2_AWADDR(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWADDR),
    .m_axi_gmem2_AWID(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWID),
    .m_axi_gmem2_AWLEN(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWLEN),
    .m_axi_gmem2_AWSIZE(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWSIZE),
    .m_axi_gmem2_AWBURST(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWBURST),
    .m_axi_gmem2_AWLOCK(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWLOCK),
    .m_axi_gmem2_AWCACHE(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWCACHE),
    .m_axi_gmem2_AWPROT(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWPROT),
    .m_axi_gmem2_AWQOS(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWQOS),
    .m_axi_gmem2_AWREGION(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWREGION),
    .m_axi_gmem2_AWUSER(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWUSER),
    .m_axi_gmem2_WVALID(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_WVALID),
    .m_axi_gmem2_WREADY(m_axi_gmem2_WREADY),
    .m_axi_gmem2_WDATA(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_WDATA),
    .m_axi_gmem2_WSTRB(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_WSTRB),
    .m_axi_gmem2_WLAST(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_WLAST),
    .m_axi_gmem2_WID(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_WID),
    .m_axi_gmem2_WUSER(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_WUSER),
    .m_axi_gmem2_ARVALID(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARVALID),
    .m_axi_gmem2_ARREADY(1'b0),
    .m_axi_gmem2_ARADDR(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARADDR),
    .m_axi_gmem2_ARID(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARID),
    .m_axi_gmem2_ARLEN(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARLEN),
    .m_axi_gmem2_ARSIZE(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARSIZE),
    .m_axi_gmem2_ARBURST(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARBURST),
    .m_axi_gmem2_ARLOCK(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARLOCK),
    .m_axi_gmem2_ARCACHE(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARCACHE),
    .m_axi_gmem2_ARPROT(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARPROT),
    .m_axi_gmem2_ARQOS(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARQOS),
    .m_axi_gmem2_ARREGION(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARREGION),
    .m_axi_gmem2_ARUSER(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_ARUSER),
    .m_axi_gmem2_RVALID(1'b0),
    .m_axi_gmem2_RREADY(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_RREADY),
    .m_axi_gmem2_RDATA(128'd0),
    .m_axi_gmem2_RLAST(1'b0),
    .m_axi_gmem2_RID(1'd0),
    .m_axi_gmem2_RFIFONUM(9'd0),
    .m_axi_gmem2_RUSER(1'd0),
    .m_axi_gmem2_RRESP(2'd0),
    .m_axi_gmem2_BVALID(m_axi_gmem2_BVALID),
    .m_axi_gmem2_BREADY(grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_BREADY),
    .m_axi_gmem2_BRESP(m_axi_gmem2_BRESP),
    .m_axi_gmem2_BID(m_axi_gmem2_BID),
    .m_axi_gmem2_BUSER(m_axi_gmem2_BUSER),
    .div(div_reg_193),
    .sext_ln81(trunc_ln_reg_198)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((m_axi_gmem2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_writeout_Pipeline_write_fu_85_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_writeout_Pipeline_write_fu_85_ap_start_reg <= 1'b1;
        end else if ((grp_writeout_Pipeline_write_fu_85_ap_ready == 1'b1)) begin
            grp_writeout_Pipeline_write_fu_85_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        div_reg_193 <= div_fu_143_p3;
        empty_reg_204 <= empty_fu_171_p3;
        trunc_ln_reg_198 <= {{X_final_dout[63:4]}};
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        X2_stream_read = grp_writeout_Pipeline_write_fu_85_X2_stream_read;
    end else begin
        X2_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        X_final_blk_n = X_final_empty_n;
    end else begin
        X_final_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        X_final_read_local = 1'b1;
    end else begin
        X_final_read_local = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem2_AWREADY == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_writeout_Pipeline_write_fu_85_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem2_BVALID == 1'b0)) begin
        ap_ST_fsm_state9_blk = 1'b1;
    end else begin
        ap_ST_fsm_state9_blk = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        gmem2_blk_n_AW = m_axi_gmem2_AWREADY;
    end else begin
        gmem2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        gmem2_blk_n_B = m_axi_gmem2_BVALID;
    end else begin
        gmem2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((m_axi_gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem2_AWADDR = sext_ln81_fu_179_p1;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem2_AWADDR = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWADDR;
    end else begin
        m_axi_gmem2_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem2_AWBURST = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWBURST;
    end else begin
        m_axi_gmem2_AWBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem2_AWCACHE = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWCACHE;
    end else begin
        m_axi_gmem2_AWCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem2_AWID = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWID;
    end else begin
        m_axi_gmem2_AWID = 1'd0;
    end
end

always @ (*) begin
    if (((m_axi_gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem2_AWLEN = zext_ln81_fu_189_p1;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem2_AWLEN = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWLEN;
    end else begin
        m_axi_gmem2_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem2_AWLOCK = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWLOCK;
    end else begin
        m_axi_gmem2_AWLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem2_AWPROT = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWPROT;
    end else begin
        m_axi_gmem2_AWPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem2_AWQOS = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWQOS;
    end else begin
        m_axi_gmem2_AWQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem2_AWREGION = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWREGION;
    end else begin
        m_axi_gmem2_AWREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem2_AWSIZE = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWSIZE;
    end else begin
        m_axi_gmem2_AWSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem2_AWUSER = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWUSER;
    end else begin
        m_axi_gmem2_AWUSER = 1'd0;
    end
end

always @ (*) begin
    if (((m_axi_gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_gmem2_AWVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem2_AWVALID = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_AWVALID;
    end else begin
        m_axi_gmem2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
        m_axi_gmem2_BREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem2_BREADY = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_BREADY;
    end else begin
        m_axi_gmem2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem2_WVALID = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_WVALID;
    end else begin
        m_axi_gmem2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_blk_n = n_empty_n;
    end else begin
        n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
        n_read_local = 1'b1;
    end else begin
        n_read_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (1'b0 == ap_block_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((m_axi_gmem2_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_writeout_Pipeline_write_fu_85_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((m_axi_gmem2_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign X_final_read = X_final_read_local;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((n_empty_n == 1'b0) | (1'b0 == X_final_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

assign div_fu_143_p3 = ((tmp_fu_95_p3[0:0] == 1'b1) ? p_neg_t_fu_123_p2 : p_lshr_f_cast_fu_139_p1);

assign empty_fu_171_p3 = ((icmp_ln81_fu_151_p2[0:0] == 1'b1) ? trunc_ln81_fu_157_p1 : 30'd0);

assign grp_writeout_Pipeline_write_fu_85_ap_start = grp_writeout_Pipeline_write_fu_85_ap_start_reg;

assign icmp_ln81_fu_151_p2 = (($signed(p_lshr_f_fu_129_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign m_axi_gmem2_ARADDR = 64'd0;

assign m_axi_gmem2_ARBURST = 2'd0;

assign m_axi_gmem2_ARCACHE = 4'd0;

assign m_axi_gmem2_ARID = 1'd0;

assign m_axi_gmem2_ARLEN = 32'd0;

assign m_axi_gmem2_ARLOCK = 2'd0;

assign m_axi_gmem2_ARPROT = 3'd0;

assign m_axi_gmem2_ARQOS = 4'd0;

assign m_axi_gmem2_ARREGION = 4'd0;

assign m_axi_gmem2_ARSIZE = 3'd0;

assign m_axi_gmem2_ARUSER = 1'd0;

assign m_axi_gmem2_ARVALID = 1'b0;

assign m_axi_gmem2_RREADY = 1'b0;

assign m_axi_gmem2_WDATA = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_WDATA;

assign m_axi_gmem2_WID = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_WID;

assign m_axi_gmem2_WLAST = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_WLAST;

assign m_axi_gmem2_WSTRB = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_WSTRB;

assign m_axi_gmem2_WUSER = grp_writeout_Pipeline_write_fu_85_m_axi_gmem2_WUSER;

assign n_read = n_read_local;

assign p_lshr_cast_fu_119_p1 = p_lshr_fu_109_p4;

assign p_lshr_f_cast_fu_139_p1 = p_lshr_f_fu_129_p4;

assign p_lshr_f_fu_129_p4 = {{n_dout[31:1]}};

assign p_lshr_fu_109_p4 = {{p_neg_fu_103_p2[31:1]}};

assign p_neg_fu_103_p2 = (32'd0 - n_dout);

assign p_neg_t_fu_123_p2 = (32'd0 - p_lshr_cast_fu_119_p1);

assign sext_ln81_fu_179_p1 = $signed(trunc_ln_reg_198);

assign tmp_fu_95_p3 = n_dout[32'd31];

assign trunc_ln81_fu_157_p1 = div_fu_143_p3[29:0];

assign zext_ln81_fu_189_p1 = empty_reg_204;

endmodule //ldl_dsolve_writeout
