-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ldl_dsolve_compute_Pipeline_read_from_stream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_stream_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    X_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    X_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    X_stream_empty_n : IN STD_LOGIC;
    X_stream_read : OUT STD_LOGIC;
    D_stream_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    D_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    D_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    D_stream_empty_n : IN STD_LOGIC;
    D_stream_read : OUT STD_LOGIC;
    X2_stream_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    X2_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    X2_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    X2_stream_full_n : IN STD_LOGIC;
    X2_stream_write : OUT STD_LOGIC;
    empty : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ldl_dsolve_compute_Pipeline_read_from_stream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln53_fu_95_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal X_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal D_stream_blk_n : STD_LOGIC;
    signal X2_stream_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal w1_a_fu_112_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w1_a_reg_182 : STD_LOGIC_VECTOR (63 downto 0);
    signal w1_b_reg_187 : STD_LOGIC_VECTOR (63 downto 0);
    signal w2_a_fu_126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w2_a_reg_192 : STD_LOGIC_VECTOR (63 downto 0);
    signal w2_b_reg_197 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_79_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tout_a_reg_222 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_83_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tout_b_reg_227 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal i_3_fu_101_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal X_stream_read_local : STD_LOGIC;
    signal D_stream_read_local : STD_LOGIC;
    signal writeconcat_fu_162_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal X2_stream_write_local : STD_LOGIC;
    signal grp_fu_79_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_79_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_83_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_83_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal outb_fu_159_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal outa_fu_156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_done_int_frp : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal frp_pipeline_valid_U_valid_out : STD_LOGIC_VECTOR (24 downto 0);
    signal frp_pipeline_valid_U_num_valid_datasets : STD_LOGIC_VECTOR (5 downto 0);
    signal pf_X2_stream_U_data_out : STD_LOGIC_VECTOR (127 downto 0);
    signal pf_X2_stream_U_data_out_vld : STD_LOGIC;
    signal pf_X2_stream_U_pf_ready : STD_LOGIC;
    signal pf_X2_stream_U_pf_done : STD_LOGIC;
    signal ap_frp_data_next_issued_X_stream : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_frp_data_issued_nxt_X_stream_op40 : STD_LOGIC;
    signal ap_frp_data_req_X_stream : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_frp_data_req_X_stream_op40 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_frp_data_next_issued_D_stream : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_frp_data_issued_nxt_D_stream_op41 : STD_LOGIC;
    signal ap_frp_data_req_D_stream : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_frp_data_req_D_stream_op41 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_frp_roi_pvb_no_fwd_prs : BOOLEAN;
    signal ap_condition_frp_pvb_no_bkwd_prs : BOOLEAN;
    signal ap_condition_frp_pvb_pf_start : BOOLEAN;
    signal ap_frp_vld_in : STD_LOGIC;
    signal frp_pipeline_valid_U_exitcond : STD_LOGIC;
    signal pf_all_done : STD_LOGIC := '0';
    signal ap_ce_reg : STD_LOGIC;

    component ldl_dsolve_ddiv_64ns_64ns_64_22_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component ldl_dsolve_frp_fifoout IS
    generic (
        BlockingType : INTEGER;
        PipeLatency : INTEGER;
        PipelineII : INTEGER;
        DataWidth : INTEGER;
        NumWrites : INTEGER;
        CeilLog2Stages : INTEGER;
        CeilLog2FDepth : INTEGER;
        PfAllDoneEnable : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        valid : IN STD_LOGIC_VECTOR (24 downto 0);
        data_in_vld : IN STD_LOGIC;
        data_out_vld : OUT STD_LOGIC;
        data_in_last : IN STD_LOGIC;
        pf_continue : IN STD_LOGIC;
        pf_all_done : IN STD_LOGIC;
        pf_ready : OUT STD_LOGIC;
        pf_done : OUT STD_LOGIC;
        data_out_read : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        num_valid_datasets : IN STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component ldl_dsolve_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;


    component ldl_dsolve_frp_pipeline_valid IS
    generic (
        PipelineLatency : INTEGER;
        PipelineII : INTEGER;
        CeilLog2Stages : INTEGER;
        ExitLatency : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        valid_in : IN STD_LOGIC;
        exitcond : IN STD_LOGIC;
        valid_out : OUT STD_LOGIC_VECTOR (24 downto 0);
        num_valid_datasets : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    ddiv_64ns_64ns_64_22_no_dsp_1_U20 : component ldl_dsolve_ddiv_64ns_64ns_64_22_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_79_p0,
        din1 => grp_fu_79_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_79_p2);

    ddiv_64ns_64ns_64_22_no_dsp_1_U21 : component ldl_dsolve_ddiv_64ns_64ns_64_22_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 22,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_83_p0,
        din1 => grp_fu_83_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_83_p2);

    flow_control_loop_pipe_sequential_init_U : component ldl_dsolve_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => pf_all_done,
        ap_continue_int => ap_continue_int,
        ap_done_int => pf_all_done);

    frp_pipeline_valid_U : component ldl_dsolve_frp_pipeline_valid
    generic map (
        PipelineLatency => 25,
        PipelineII => 1,
        CeilLog2Stages => 5,
        ExitLatency => 0)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        valid_in => ap_frp_vld_in,
        exitcond => frp_pipeline_valid_U_exitcond,
        valid_out => frp_pipeline_valid_U_valid_out,
        num_valid_datasets => frp_pipeline_valid_U_num_valid_datasets);

    pf_X2_stream_U : component ldl_dsolve_frp_fifoout
    generic map (
        BlockingType => 1,
        PipeLatency => 25,
        PipelineII => 1,
        DataWidth => 128,
        NumWrites => 1,
        CeilLog2Stages => 5,
        CeilLog2FDepth => 5,
        PfAllDoneEnable => 2)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => writeconcat_fu_162_p3,
        data_out => pf_X2_stream_U_data_out,
        valid => frp_pipeline_valid_U_valid_out,
        data_in_vld => X2_stream_write_local,
        data_out_vld => pf_X2_stream_U_data_out_vld,
        data_in_last => ap_done_int_frp,
        pf_continue => ap_const_logic_1,
        pf_all_done => pf_all_done,
        pf_ready => pf_X2_stream_U_pf_ready,
        pf_done => pf_X2_stream_U_pf_done,
        data_out_read => X2_stream_full_n,
        ap_start => ap_const_logic_0,
        num_valid_datasets => frp_pipeline_valid_U_num_valid_datasets);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_frp_data_req_D_stream_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_frp_data_req_D_stream <= ap_const_lv5_0;
            else
                if ((frp_pipeline_valid_U_valid_out(0) = ap_const_logic_0)) then 
                    ap_frp_data_req_D_stream <= std_logic_vector(unsigned(ap_frp_data_req_D_stream) - unsigned(ap_frp_data_next_issued_D_stream));
                else 
                    ap_frp_data_req_D_stream <= std_logic_vector(unsigned(std_logic_vector(unsigned(ap_frp_data_req_D_stream) + unsigned(ap_frp_data_req_D_stream_op41))) - unsigned(ap_frp_data_next_issued_D_stream));
                end if; 
            end if;
        end if;
    end process;


    ap_frp_data_req_X_stream_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_frp_data_req_X_stream <= ap_const_lv5_0;
            else
                if ((frp_pipeline_valid_U_valid_out(0) = ap_const_logic_0)) then 
                    ap_frp_data_req_X_stream <= std_logic_vector(unsigned(ap_frp_data_req_X_stream) - unsigned(ap_frp_data_next_issued_X_stream));
                else 
                    ap_frp_data_req_X_stream <= std_logic_vector(unsigned(std_logic_vector(unsigned(ap_frp_data_req_X_stream) + unsigned(ap_frp_data_req_X_stream_op40))) - unsigned(ap_frp_data_next_issued_X_stream));
                end if; 
            end if;
        end if;
    end process;


    pf_all_done_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                pf_all_done <= ap_const_logic_0;
            else
                pf_all_done <= (pf_X2_stream_U_pf_done);
            end if;
        end if;
    end process;


    i_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((frp_pipeline_valid_U_valid_out(0) = ap_const_logic_1) and ((icmp_ln53_fu_95_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                i_fu_50 <= i_3_fu_101_p2;
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_fu_50 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                tout_a_reg_222 <= grp_fu_79_p2;
                tout_b_reg_227 <= grp_fu_83_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                w1_a_reg_182 <= w1_a_fu_112_p1;
                w1_b_reg_187 <= X_stream_dout(127 downto 64);
                w2_a_reg_192 <= w2_a_fu_126_p1;
                w2_b_reg_197 <= D_stream_dout(127 downto 64);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    D_stream_blk_n <= ap_const_logic_1;
    D_stream_read <= D_stream_read_local;

    D_stream_read_local_assign_proc : process(ap_block_pp0_stage0_11001, frp_pipeline_valid_U_valid_out)
    begin
        if (((frp_pipeline_valid_U_valid_out(1) = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            D_stream_read_local <= ap_const_logic_1;
        else 
            D_stream_read_local <= ap_const_logic_0;
        end if; 
    end process;

    X2_stream_blk_n <= ap_const_logic_1;
    X2_stream_din <= pf_X2_stream_U_data_out;

    X2_stream_write_assign_proc : process(pf_X2_stream_U_data_out_vld)
    begin
        if ((pf_X2_stream_U_data_out_vld = ap_const_logic_1)) then 
            X2_stream_write <= ap_const_logic_1;
        else 
            X2_stream_write <= ap_const_logic_0;
        end if; 
    end process;


    X2_stream_write_local_assign_proc : process(ap_enable_reg_pp0_iter24, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X2_stream_write_local <= ap_const_logic_1;
        else 
            X2_stream_write_local <= ap_const_logic_0;
        end if; 
    end process;

    X_stream_blk_n <= ap_const_logic_1;
    X_stream_read <= X_stream_read_local;

    X_stream_read_local_assign_proc : process(ap_block_pp0_stage0_11001, frp_pipeline_valid_U_valid_out)
    begin
        if (((frp_pipeline_valid_U_valid_out(1) = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_stream_read_local <= ap_const_logic_1;
        else 
            X_stream_read_local <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_block_pp0_stage0 <= ap_const_boolean_0;
    ap_block_pp0_stage0_01001 <= ap_const_boolean_0;
    ap_block_pp0_stage0_11001 <= ap_const_boolean_0;
    ap_block_pp0_stage0_subdone <= ap_const_boolean_0;
        ap_block_state25_pp0_stage0_iter24 <= (ap_const_logic_1 = ap_const_logic_0);
        ap_block_state2_pp0_stage0_iter1 <= (ap_const_logic_1 = ap_const_logic_0);

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_block_pp0_stage0_subdone, icmp_ln53_fu_95_p2, frp_pipeline_valid_U_valid_out)
    begin
        if (((frp_pipeline_valid_U_valid_out(0) = ap_const_logic_1) and ((icmp_ln53_fu_95_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_frp_pvb_no_bkwd_prs_assign_proc : process(pf_X2_stream_U_pf_ready)
    begin
                ap_condition_frp_pvb_no_bkwd_prs <= (pf_X2_stream_U_pf_ready = ap_const_logic_1);
    end process;


    ap_condition_frp_pvb_pf_start_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_start_int)
    begin
                ap_condition_frp_pvb_pf_start <= ((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_frp_roi_pvb_no_fwd_prs_assign_proc : process(X_stream_num_data_valid, D_stream_num_data_valid, ap_frp_data_req_X_stream, ap_frp_data_req_X_stream_op40, ap_frp_data_req_D_stream, ap_frp_data_req_D_stream_op41)
    begin
                ap_condition_frp_roi_pvb_no_fwd_prs <= not(((unsigned(D_stream_num_data_valid) < unsigned(std_logic_vector(unsigned(ap_frp_data_req_D_stream) + unsigned(ap_frp_data_req_D_stream_op41)))) or (unsigned(X_stream_num_data_valid) < unsigned(std_logic_vector(unsigned(ap_frp_data_req_X_stream) + unsigned(ap_frp_data_req_X_stream_op40))))));
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_frp_assign_proc : process(ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter23_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter23_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int_frp <= ap_const_logic_1;
        else 
            ap_done_int_frp <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_reg_pp0_iter1_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(1) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(10) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter10 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(11) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter11 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(12) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter12 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(13) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter13 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(14) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter14 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(15) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter15 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(16) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter16 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(17) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter17 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(18) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter18 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(19) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter19 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(2) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter2 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(20) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter20 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(21) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter21 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(22) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter22 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(23) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter23 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(24) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter24 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(3) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter3 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(4) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter4 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(5) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter5 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(6) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter6 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(7) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter7 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(8) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter8 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(9) = ap_const_logic_1)) then 
            ap_enable_reg_pp0_iter9 <= ap_const_logic_1;
        else 
            ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_frp_data_issued_nxt_D_stream_op41_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(1) = ap_const_logic_1)) then 
            ap_frp_data_issued_nxt_D_stream_op41 <= ap_const_logic_1;
        else 
            ap_frp_data_issued_nxt_D_stream_op41 <= ap_const_logic_0;
        end if; 
    end process;


    ap_frp_data_issued_nxt_X_stream_op40_assign_proc : process(frp_pipeline_valid_U_valid_out)
    begin
        if ((frp_pipeline_valid_U_valid_out(1) = ap_const_logic_1)) then 
            ap_frp_data_issued_nxt_X_stream_op40 <= ap_const_logic_1;
        else 
            ap_frp_data_issued_nxt_X_stream_op40 <= ap_const_logic_0;
        end if; 
    end process;


    ap_frp_data_next_issued_D_stream_assign_proc : process(ap_frp_data_issued_nxt_D_stream_op41)
    begin
        if ((ap_frp_data_issued_nxt_D_stream_op41 = ap_const_logic_1)) then 
            ap_frp_data_next_issued_D_stream <= ap_const_lv1_1;
        else 
            ap_frp_data_next_issued_D_stream <= ap_const_lv1_0;
        end if; 
    end process;


    ap_frp_data_next_issued_X_stream_assign_proc : process(ap_frp_data_issued_nxt_X_stream_op40)
    begin
        if ((ap_frp_data_issued_nxt_X_stream_op40 = ap_const_logic_1)) then 
            ap_frp_data_next_issued_X_stream <= ap_const_lv1_1;
        else 
            ap_frp_data_next_issued_X_stream <= ap_const_lv1_0;
        end if; 
    end process;


    ap_frp_data_req_D_stream_op41_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln53_fu_95_p2)
    begin
        if ((not((icmp_ln53_fu_95_p2 = ap_const_lv1_1)) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_frp_data_req_D_stream_op41 <= ap_const_lv1_1;
        else 
            ap_frp_data_req_D_stream_op41 <= ap_const_lv1_0;
        end if; 
    end process;


    ap_frp_data_req_X_stream_op40_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln53_fu_95_p2)
    begin
        if ((not((icmp_ln53_fu_95_p2 = ap_const_lv1_1)) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_frp_data_req_X_stream_op40 <= ap_const_lv1_1;
        else 
            ap_frp_data_req_X_stream_op40 <= ap_const_lv1_0;
        end if; 
    end process;


    ap_frp_vld_in_assign_proc : process(ap_condition_frp_roi_pvb_no_fwd_prs, ap_condition_frp_pvb_no_bkwd_prs, ap_condition_frp_pvb_pf_start)
    begin
        if (((ap_const_boolean_1 = ap_condition_frp_pvb_pf_start) and (ap_const_boolean_1 = ap_condition_frp_pvb_no_bkwd_prs) and (ap_const_boolean_1 = ap_condition_frp_roi_pvb_no_fwd_prs))) then 
            ap_frp_vld_in <= ap_const_logic_1;
        else 
            ap_frp_vld_in <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24)
    begin
        if (((ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_block_pp0_stage0_subdone, frp_pipeline_valid_U_valid_out)
    begin
        if (((frp_pipeline_valid_U_valid_out(0) = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_50, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_50;
        end if; 
    end process;


    frp_pipeline_valid_U_exitcond_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln53_fu_95_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln53_fu_95_p2 = ap_const_lv1_1))) then 
            frp_pipeline_valid_U_exitcond <= ap_const_logic_1;
        else 
            frp_pipeline_valid_U_exitcond <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_79_p0 <= w1_a_reg_182;
    grp_fu_79_p1 <= w2_a_reg_192;
    grp_fu_83_p0 <= w1_b_reg_187;
    grp_fu_83_p1 <= w2_b_reg_197;
    i_3_fu_101_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv32_2));
    icmp_ln53_fu_95_p2 <= "1" when (ap_sig_allocacmp_i_2 = empty) else "0";
    outa_fu_156_p1 <= tout_a_reg_222;
    outb_fu_159_p1 <= tout_b_reg_227;
    w1_a_fu_112_p1 <= X_stream_dout(64 - 1 downto 0);
    w2_a_fu_126_p1 <= D_stream_dout(64 - 1 downto 0);
    writeconcat_fu_162_p3 <= (outb_fu_159_p1 & outa_fu_156_p1);
end behav;
