// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module ldl_dsolve_compute (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        n_dout,
        n_num_data_valid,
        n_fifo_cap,
        n_empty_n,
        n_read,
        X_stream_dout,
        X_stream_num_data_valid,
        X_stream_fifo_cap,
        X_stream_empty_n,
        X_stream_read,
        D_stream_dout,
        D_stream_num_data_valid,
        D_stream_fifo_cap,
        D_stream_empty_n,
        D_stream_read,
        X2_stream_din,
        X2_stream_num_data_valid,
        X2_stream_fifo_cap,
        X2_stream_full_n,
        X2_stream_write,
        n_c_din,
        n_c_num_data_valid,
        n_c_fifo_cap,
        n_c_full_n,
        n_c_write
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] n_dout;
input  [2:0] n_num_data_valid;
input  [2:0] n_fifo_cap;
input   n_empty_n;
output   n_read;
input  [127:0] X_stream_dout;
input  [2:0] X_stream_num_data_valid;
input  [2:0] X_stream_fifo_cap;
input   X_stream_empty_n;
output   X_stream_read;
input  [127:0] D_stream_dout;
input  [2:0] D_stream_num_data_valid;
input  [2:0] D_stream_fifo_cap;
input   D_stream_empty_n;
output   D_stream_read;
output  [127:0] X2_stream_din;
input  [2:0] X2_stream_num_data_valid;
input  [2:0] X2_stream_fifo_cap;
input   X2_stream_full_n;
output   X2_stream_write;
output  [31:0] n_c_din;
input  [2:0] n_c_num_data_valid;
input  [2:0] n_c_fifo_cap;
input   n_c_full_n;
output   n_c_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg X_stream_read;
reg D_stream_read;
reg X2_stream_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    n_blk_n;
reg    n_c_blk_n;
wire   [30:0] select_ln53_1_fu_139_p3;
reg   [30:0] select_ln53_1_reg_155;
reg    ap_block_state1;
wire   [31:0] tmp_3_fu_147_p3;
reg   [31:0] tmp_3_reg_160;
wire    ap_CS_fsm_state2;
wire    grp_compute_Pipeline_read_from_stream_fu_66_ap_start;
wire    grp_compute_Pipeline_read_from_stream_fu_66_ap_done;
wire    grp_compute_Pipeline_read_from_stream_fu_66_ap_idle;
wire    grp_compute_Pipeline_read_from_stream_fu_66_ap_ready;
wire    grp_compute_Pipeline_read_from_stream_fu_66_X_stream_read;
wire    grp_compute_Pipeline_read_from_stream_fu_66_D_stream_read;
wire   [127:0] grp_compute_Pipeline_read_from_stream_fu_66_X2_stream_din;
wire    grp_compute_Pipeline_read_from_stream_fu_66_X2_stream_write;
reg    grp_compute_Pipeline_read_from_stream_fu_66_ap_start_reg;
wire    ap_CS_fsm_state3;
reg    n_read_local;
reg    n_c_write_local;
wire   [31:0] add_ln53_fu_85_p2;
wire   [31:0] xor_ln53_fu_99_p2;
wire   [30:0] p_lshr_fu_105_p4;
wire   [0:0] tmp_1_fu_91_p3;
wire   [30:0] sub_ln53_fu_115_p2;
wire   [30:0] tmp_2_fu_121_p4;
wire   [0:0] tmp_fu_77_p3;
wire   [30:0] select_ln53_fu_131_p3;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_compute_Pipeline_read_from_stream_fu_66_ap_start_reg = 1'b0;
end

ldl_dsolve_compute_Pipeline_read_from_stream grp_compute_Pipeline_read_from_stream_fu_66(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_compute_Pipeline_read_from_stream_fu_66_ap_start),
    .ap_done(grp_compute_Pipeline_read_from_stream_fu_66_ap_done),
    .ap_idle(grp_compute_Pipeline_read_from_stream_fu_66_ap_idle),
    .ap_ready(grp_compute_Pipeline_read_from_stream_fu_66_ap_ready),
    .X_stream_dout(X_stream_dout),
    .X_stream_num_data_valid(X_stream_num_data_valid),
    .X_stream_fifo_cap(X_stream_fifo_cap),
    .X_stream_empty_n(X_stream_empty_n),
    .X_stream_read(grp_compute_Pipeline_read_from_stream_fu_66_X_stream_read),
    .D_stream_dout(D_stream_dout),
    .D_stream_num_data_valid(D_stream_num_data_valid),
    .D_stream_fifo_cap(D_stream_fifo_cap),
    .D_stream_empty_n(D_stream_empty_n),
    .D_stream_read(grp_compute_Pipeline_read_from_stream_fu_66_D_stream_read),
    .X2_stream_din(grp_compute_Pipeline_read_from_stream_fu_66_X2_stream_din),
    .X2_stream_num_data_valid(3'd0),
    .X2_stream_fifo_cap(3'd0),
    .X2_stream_full_n(X2_stream_full_n),
    .X2_stream_write(grp_compute_Pipeline_read_from_stream_fu_66_X2_stream_write),
    .empty(tmp_3_reg_160)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_compute_Pipeline_read_from_stream_fu_66_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_compute_Pipeline_read_from_stream_fu_66_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_compute_Pipeline_read_from_stream_fu_66_ap_start_reg <= 1'b1;
        end else if ((grp_compute_Pipeline_read_from_stream_fu_66_ap_ready == 1'b1)) begin
            grp_compute_Pipeline_read_from_stream_fu_66_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        select_ln53_1_reg_155 <= select_ln53_1_fu_139_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_3_reg_160[31 : 1] <= tmp_3_fu_147_p3[31 : 1];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        D_stream_read = grp_compute_Pipeline_read_from_stream_fu_66_D_stream_read;
    end else begin
        D_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        X2_stream_write = grp_compute_Pipeline_read_from_stream_fu_66_X2_stream_write;
    end else begin
        X2_stream_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        X_stream_read = grp_compute_Pipeline_read_from_stream_fu_66_X_stream_read;
    end else begin
        X_stream_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_compute_Pipeline_read_from_stream_fu_66_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_compute_Pipeline_read_from_stream_fu_66_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_compute_Pipeline_read_from_stream_fu_66_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_blk_n = n_empty_n;
    end else begin
        n_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        n_c_blk_n = n_c_full_n;
    end else begin
        n_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        n_c_write_local = 1'b1;
    end else begin
        n_c_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        n_read_local = 1'b1;
    end else begin
        n_read_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_compute_Pipeline_read_from_stream_fu_66_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign X2_stream_din = grp_compute_Pipeline_read_from_stream_fu_66_X2_stream_din;

assign add_ln53_fu_85_p2 = (n_dout + 32'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (n_c_full_n == 1'b0) | (n_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign grp_compute_Pipeline_read_from_stream_fu_66_ap_start = grp_compute_Pipeline_read_from_stream_fu_66_ap_start_reg;

assign n_c_din = n_dout;

assign n_c_write = n_c_write_local;

assign n_read = n_read_local;

assign p_lshr_fu_105_p4 = {{xor_ln53_fu_99_p2[31:1]}};

assign select_ln53_1_fu_139_p3 = ((tmp_fu_77_p3[0:0] == 1'b1) ? 31'd0 : select_ln53_fu_131_p3);

assign select_ln53_fu_131_p3 = ((tmp_1_fu_91_p3[0:0] == 1'b1) ? sub_ln53_fu_115_p2 : tmp_2_fu_121_p4);

assign sub_ln53_fu_115_p2 = (31'd0 - p_lshr_fu_105_p4);

assign tmp_1_fu_91_p3 = add_ln53_fu_85_p2[32'd31];

assign tmp_2_fu_121_p4 = {{add_ln53_fu_85_p2[31:1]}};

assign tmp_3_fu_147_p3 = {{select_ln53_1_reg_155}, {1'd0}};

assign tmp_fu_77_p3 = n_dout[32'd31];

assign xor_ln53_fu_99_p2 = (n_dout ^ 32'd4294967295);

always @ (posedge ap_clk) begin
    tmp_3_reg_160[0] <= 1'b0;
end

endmodule //ldl_dsolve_compute
