-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ldl_dsolve_compute is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    n_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    n_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    n_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    n_empty_n : IN STD_LOGIC;
    n_read : OUT STD_LOGIC;
    X_stream_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    X_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    X_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    X_stream_empty_n : IN STD_LOGIC;
    X_stream_read : OUT STD_LOGIC;
    D_stream_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    D_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    D_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    D_stream_empty_n : IN STD_LOGIC;
    D_stream_read : OUT STD_LOGIC;
    X2_stream_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    X2_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    X2_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    X2_stream_full_n : IN STD_LOGIC;
    X2_stream_write : OUT STD_LOGIC;
    n_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    n_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    n_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    n_c_full_n : IN STD_LOGIC;
    n_c_write : OUT STD_LOGIC );
end;


architecture behav of ldl_dsolve_compute is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal n_blk_n : STD_LOGIC;
    signal n_c_blk_n : STD_LOGIC;
    signal select_ln53_1_fu_139_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln53_1_reg_155 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_3_fu_147_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_compute_Pipeline_read_from_stream_fu_66_ap_start : STD_LOGIC;
    signal grp_compute_Pipeline_read_from_stream_fu_66_ap_done : STD_LOGIC;
    signal grp_compute_Pipeline_read_from_stream_fu_66_ap_idle : STD_LOGIC;
    signal grp_compute_Pipeline_read_from_stream_fu_66_ap_ready : STD_LOGIC;
    signal grp_compute_Pipeline_read_from_stream_fu_66_X_stream_read : STD_LOGIC;
    signal grp_compute_Pipeline_read_from_stream_fu_66_D_stream_read : STD_LOGIC;
    signal grp_compute_Pipeline_read_from_stream_fu_66_X2_stream_din : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_compute_Pipeline_read_from_stream_fu_66_X2_stream_write : STD_LOGIC;
    signal grp_compute_Pipeline_read_from_stream_fu_66_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal n_read_local : STD_LOGIC;
    signal n_c_write_local : STD_LOGIC;
    signal add_ln53_fu_85_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln53_fu_99_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_fu_105_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_1_fu_91_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln53_fu_115_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_2_fu_121_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_77_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln53_fu_131_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component ldl_dsolve_compute_Pipeline_read_from_stream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_stream_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        X_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        X_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        X_stream_empty_n : IN STD_LOGIC;
        X_stream_read : OUT STD_LOGIC;
        D_stream_dout : IN STD_LOGIC_VECTOR (127 downto 0);
        D_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        D_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        D_stream_empty_n : IN STD_LOGIC;
        D_stream_read : OUT STD_LOGIC;
        X2_stream_din : OUT STD_LOGIC_VECTOR (127 downto 0);
        X2_stream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        X2_stream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        X2_stream_full_n : IN STD_LOGIC;
        X2_stream_write : OUT STD_LOGIC;
        empty : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_compute_Pipeline_read_from_stream_fu_66 : component ldl_dsolve_compute_Pipeline_read_from_stream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute_Pipeline_read_from_stream_fu_66_ap_start,
        ap_done => grp_compute_Pipeline_read_from_stream_fu_66_ap_done,
        ap_idle => grp_compute_Pipeline_read_from_stream_fu_66_ap_idle,
        ap_ready => grp_compute_Pipeline_read_from_stream_fu_66_ap_ready,
        X_stream_dout => X_stream_dout,
        X_stream_num_data_valid => X_stream_num_data_valid,
        X_stream_fifo_cap => X_stream_fifo_cap,
        X_stream_empty_n => X_stream_empty_n,
        X_stream_read => grp_compute_Pipeline_read_from_stream_fu_66_X_stream_read,
        D_stream_dout => D_stream_dout,
        D_stream_num_data_valid => D_stream_num_data_valid,
        D_stream_fifo_cap => D_stream_fifo_cap,
        D_stream_empty_n => D_stream_empty_n,
        D_stream_read => grp_compute_Pipeline_read_from_stream_fu_66_D_stream_read,
        X2_stream_din => grp_compute_Pipeline_read_from_stream_fu_66_X2_stream_din,
        X2_stream_num_data_valid => ap_const_lv3_0,
        X2_stream_fifo_cap => ap_const_lv3_0,
        X2_stream_full_n => X2_stream_full_n,
        X2_stream_write => grp_compute_Pipeline_read_from_stream_fu_66_X2_stream_write,
        empty => tmp_3_reg_160);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_compute_Pipeline_read_from_stream_fu_66_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_compute_Pipeline_read_from_stream_fu_66_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compute_Pipeline_read_from_stream_fu_66_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_compute_Pipeline_read_from_stream_fu_66_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_Pipeline_read_from_stream_fu_66_ap_ready = ap_const_logic_1)) then 
                    grp_compute_Pipeline_read_from_stream_fu_66_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                select_ln53_1_reg_155 <= select_ln53_1_fu_139_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    tmp_3_reg_160(31 downto 1) <= tmp_3_fu_147_p3(31 downto 1);
            end if;
        end if;
    end process;
    tmp_3_reg_160(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, grp_compute_Pipeline_read_from_stream_fu_66_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_compute_Pipeline_read_from_stream_fu_66_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    D_stream_read_assign_proc : process(grp_compute_Pipeline_read_from_stream_fu_66_D_stream_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            D_stream_read <= grp_compute_Pipeline_read_from_stream_fu_66_D_stream_read;
        else 
            D_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    X2_stream_din <= grp_compute_Pipeline_read_from_stream_fu_66_X2_stream_din;

    X2_stream_write_assign_proc : process(grp_compute_Pipeline_read_from_stream_fu_66_X2_stream_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            X2_stream_write <= grp_compute_Pipeline_read_from_stream_fu_66_X2_stream_write;
        else 
            X2_stream_write <= ap_const_logic_0;
        end if; 
    end process;


    X_stream_read_assign_proc : process(grp_compute_Pipeline_read_from_stream_fu_66_X_stream_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            X_stream_read <= grp_compute_Pipeline_read_from_stream_fu_66_X_stream_read;
        else 
            X_stream_read <= ap_const_logic_0;
        end if; 
    end process;

    add_ln53_fu_85_p2 <= std_logic_vector(unsigned(n_dout) + unsigned(ap_const_lv32_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_compute_Pipeline_read_from_stream_fu_66_ap_done)
    begin
        if ((grp_compute_Pipeline_read_from_stream_fu_66_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, n_empty_n, n_c_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (n_c_full_n = ap_const_logic_0) or (n_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_compute_Pipeline_read_from_stream_fu_66_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_compute_Pipeline_read_from_stream_fu_66_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_compute_Pipeline_read_from_stream_fu_66_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_compute_Pipeline_read_from_stream_fu_66_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_compute_Pipeline_read_from_stream_fu_66_ap_start <= grp_compute_Pipeline_read_from_stream_fu_66_ap_start_reg;

    n_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_blk_n <= n_empty_n;
        else 
            n_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    n_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, n_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_c_blk_n <= n_c_full_n;
        else 
            n_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    n_c_din <= n_dout;
    n_c_write <= n_c_write_local;

    n_c_write_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_c_write_local <= ap_const_logic_1;
        else 
            n_c_write_local <= ap_const_logic_0;
        end if; 
    end process;

    n_read <= n_read_local;

    n_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            n_read_local <= ap_const_logic_1;
        else 
            n_read_local <= ap_const_logic_0;
        end if; 
    end process;

    p_lshr_fu_105_p4 <= xor_ln53_fu_99_p2(31 downto 1);
    select_ln53_1_fu_139_p3 <= 
        ap_const_lv31_0 when (tmp_fu_77_p3(0) = '1') else 
        select_ln53_fu_131_p3;
    select_ln53_fu_131_p3 <= 
        sub_ln53_fu_115_p2 when (tmp_1_fu_91_p3(0) = '1') else 
        tmp_2_fu_121_p4;
    sub_ln53_fu_115_p2 <= std_logic_vector(unsigned(ap_const_lv31_0) - unsigned(p_lshr_fu_105_p4));
    tmp_1_fu_91_p3 <= add_ln53_fu_85_p2(31 downto 31);
    tmp_2_fu_121_p4 <= add_ln53_fu_85_p2(31 downto 1);
    tmp_3_fu_147_p3 <= (select_ln53_1_reg_155 & ap_const_lv1_0);
    tmp_fu_77_p3 <= n_dout(31 downto 31);
    xor_ln53_fu_99_p2 <= (n_dout xor ap_const_lv32_FFFFFFFF);
end behav;
